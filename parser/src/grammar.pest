module = { SOI ~ functionDeclaration* ~ EOI }

functionDeclaration = {
    "fn"
    ~ identifier
    ~ "(" ~ functionDeclarationArguments ~ ")"
    ~ functionReturnType?
    ~ block
}

functionDeclarationArguments = { (functionDeclarationArgument ~ ("," ~ functionDeclarationArgument)*)? }
functionDeclarationArgument = { identifier ~ (":" ~ typeName )? }
functionReturnType = { "->" ~ typeName }
typeName = _{ identifier }

block = { "{" ~ (statement | block)* ~ "}" }

statement = { whileStatement | loopStatement | ifStatement | (letStatement | assignmentStatement | returnStatement | breakStatement | continueStatement | expression) ~ ";" }
letStatement = { "let" ~ letStatementInitializer ~ ("," ~ letStatementInitializer )* }
letStatementInitializer = { identifier ~ "=" ~ expression? }
assignmentStatement = { identifier ~ "=" ~ expression }
returnStatement = { "return" ~ expression? }
ifStatement = { "if" ~ expression ~ block ~ ("else" ~ (ifStatement | block))? }
whileStatement = { "while" ~ expression ~ block }
loopStatement = { "loop" ~ block }
breakStatement = { "break" }
continueStatement = { "continue" }

expression = { prefix? ~ factor ~ (infix ~ prefix? ~ factor )* }
// Note: the order here is important, since some rules are a prefix of others. In particular, exp needs to come
// before mul, bitwise shifts before comparison, lte before lt, and so on.
infix =  _{ exp | bitwise_shl | bitwise_shr | add | sub | mul | div | rem | eq | neq | lte | lt | gte | gt | and | or | bitwise_and | bitwise_or | bitwise_xor }
    add         =  { "+" }
    sub         =  { "-" }
    mul         =  { "*" }
    div         =  { "/" }
    rem         =  { "%" }
    exp         =  { "**" }
    eq          =  { "==" }
    neq         =  { "!=" }
    lt          =  { "<" }
    lte         =  { "<=" }
    gt          =  { ">" }
    gte         =  { ">=" }
    and         =  { "&&" }
    or          =  { "||" }
    bitwise_and =  { "&" }
    bitwise_or  =  { "|" }
    bitwise_xor =  { "^" }
    bitwise_shl =  { "<<" }
    bitwise_shr =  { ">>" }
prefix = _{ neg | not | bitwise_not }
    neg         =  { "-" }
    not         =  { "!" }
    bitwise_not =  { "~" }
factor   =  _{ number | "(" ~ expression ~ ")" | bool | functionCall | identifier }
functionCall =   { identifier ~ "(" ~ functionCallArguments ~ ")" }
functionCallArguments = { (expression ~ ("," ~ expression)*)? }

number = {floatNumber | hexNumber | intNumber}

intNumber = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ intSuffix?
}
intSuffix = @{
    "i8" | "i16" | "i32" | "i64"
}

hexNumber = @{
    "0" ~ "x" ~ ASCII_HEX_DIGIT+ ~ intSuffix?
}

floatNumber = @{
    (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+)? |
     ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+)? |
     ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+)) ~ floatSuffix?
}
floatSuffix = @{
    "f32" | "f64"
}
bool = {"true" | "false"}

identifier = @{ (XID_START | "_") ~ XID_CONTINUE* }

COMMENT = _{ block_comment | line_comment }
block_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
line_comment = { "//" ~ (!NEWLINE ~ ANY)* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
